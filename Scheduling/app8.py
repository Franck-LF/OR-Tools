import streamlit as st
import pandas as pd
import datetime
import json

st.set_page_config(page_title="Planning demi-journ√©e", layout="wide")
st.title("üë• Disponibilit√©s par demi-journ√©e")

# --- Param√®tres ---
employees = [f"Employ√© {i+1}" for i in range(14)]
today = datetime.date.today()
dates = [today + datetime.timedelta(days=i) for i in range(28)]  # 4 semaines

# --- Initialisation session_state ---
if "availability_halfday" not in st.session_state:
    # Structure : {employ√© -> {date -> {"Matin": √©tat, "Apr√®s-midi": √©tat}}}
    st.session_state.availability_halfday = {
        emp: {d.strftime("%Y-%m-%d"): {"Matin": "Travail", "Apr√®s-midi": "Travail"} for d in dates}
        for emp in employees
    }

# --- Cr√©ation de DataFrame pour afficher la grille par demi-journ√©e ---
rows = []
for d in dates:
    row = {"Jour": d.strftime("%a %d/%m")}
    for emp in employees:
        # Afficher le matin et l'apr√®s-midi sous forme concat√©n√©e pour l'affichage
        val_m = st.session_state.availability_halfday[emp][d.strftime("%Y-%m-%d")]["Matin"]
        val_a = st.session_state.availability_halfday[emp][d.strftime("%Y-%m-%d")]["Apr√®s-midi"]
        row[f"{emp} - Matin"] = "‚úÖ" if val_m == "Travail" else "‚ùå"
        row[f"{emp} - Apr√®s-midi"] = "‚úÖ" if val_a == "Travail" else "‚ùå"
    rows.append(row)

df_display = pd.DataFrame(rows)

# --- Column config pour pouvoir s√©lectionner Trav/Conge directement ---
col_config = {}
for emp in employees:
    col_config[f"{emp} - Matin"] = st.column_config.SelectboxColumn(
        label=f"{emp} Matin",
        options=["‚úÖ", "‚ùå"],
        help="Clique pour basculer Trav/Conge"
    )
    col_config[f"{emp} - Apr√®s-midi"] = st.column_config.SelectboxColumn(
        label=f"{emp} Apr√®s-midi",
        options=["‚úÖ", "‚ùå"],
        help="Clique pour basculer Trav/Conge"
    )

edited = st.data_editor(
    df_display,
    use_container_width=True,
    hide_index=True,
    column_config=col_config,
    key="editor_halfday"
)

# --- Mise √† jour session_state selon le r√©sultat de l'√©diteur ---
reverse_map = {"‚úÖ": "Travail", "‚ùå": "Cong√©"}
for emp in employees:
    for i, d in enumerate(dates):
        st.session_state.availability_halfday[emp][d.strftime("%Y-%m-%d")]["Matin"] = reverse_map[edited.loc[i, f"{emp} - Matin"]]
        st.session_state.availability_halfday[emp][d.strftime("%Y-%m-%d")]["Apr√®s-midi"] = reverse_map[edited.loc[i, f"{emp} - Apr√®s-midi"]]

# --- Export JSON ---
if st.button("üíæ Exporter demi-journ√©es en JSON"):
    file_name = "disponibilites_demi_journee.json"
    with open(file_name, "w", encoding="utf-8") as f:
        json.dump(st.session_state.availability_halfday, f, ensure_ascii=False, indent=4)
    st.success(f"‚úÖ Fichier '{file_name}' export√© avec succ√®s.")
